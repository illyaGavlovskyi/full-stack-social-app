// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now()) //member since 2020
  updatedAt DateTime @updatedAt

  // Relations 
  posts Post[] // One-to-many
  comments Comment[] // One-to-many
  likes Like[] // One-to-many

  followers Follows[] @relation("following") // Users that follow this user
  following Follows[] @relation("follower") // Users that this user follows

  notifications Notification[] @relation("userNotifications") // Notifications received by the user
  notificationsCreated Notification[] @relation("notificationCreator") // Notifications created by the user
}

model Post {
  id String @id @default(cuid())
  autherId String
  content String
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  auther User @relation(fields: [autherId], references: [id], onDelete: Cascade) // cascade delete means if the user is deleted, all their posts are also deleted
  comments Comment[] 
  likes Like[] 
  notifications Notification[]
}

model Comment {
  id String @id @default(cuid())
  content String
  autherId String
  postId String
  createdAt DateTime @default(now())

  // Relations
  auther User @relation(fields: [autherId], references: [id], onDelete: Cascade) // cascade delete means if the user is deleted, all their comments are also deleted
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) // cascade delete means if the post is deleted, all its comments are also deleted
  notifications Notification[] // Notifications related to this comment

  @@index([autherId, postId]) // composite index for faster queries
}  

model Like {
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // cascade delete means if the user is deleted, all their likes are also deleted
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) // cascade delete means if the post is deleted, all its likes are also deleted

  @@index([userId, postId]) // composite index for faster queries
  @@unique([userId, postId]) // unique constraint to prevent multiple likes on the same post by the same user
}

model Follows {
  flollowerId String
  followingId String
  createdAt DateTime @default(now())

  // Relations
  follower User @relation("follower", fields: [flollowerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([flollowerId, followingId]) // composite index for faster queries
  @@id([flollowerId, followingId]) // composite primary key to prevent duplicate follows
}

model Notification {
  id String @id @default(cuid())
  userId String
  creatorId String // the user who created the notification
  type NotificationType
  read Boolean @default(false) // whether the notification has been read
  postId String?
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade) // cascade delete means if the user is deleted, all their notifications are also deleted
  creator User @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade) // cascade delete means if the creator is deleted, all their notifications are also deleted
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade) // cascade delete means if the post is deleted, all its notifications are also deleted
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade) // cascade delete means if the comment is deleted, all its notifications are also deleted

  @@index([userId, type]) // composite index for faster queries
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}